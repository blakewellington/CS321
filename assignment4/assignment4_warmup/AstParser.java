/* Generated By:JavaCC: Do not edit this line. AstParser.java */
public class AstParser implements AstParserConstants {

  static final public Ast.Program Program() throws ParseException {
  Ast.ClassDeclList cl;
    jj_consume_token(kwProgram);
    cl = astClassDeclList();
    jj_consume_token(0);
    {if (true) return new Ast.Program(cl);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.ClassDeclList astClassDeclList() throws ParseException {
  Ast.ClassDecl c; Ast.ClassDeclList cl = new Ast.ClassDeclList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwClassDecl:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      c = astClassDecl();
                       cl.add(c);
    }
    {if (true) return cl;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.VarDeclList astVarDeclList() throws ParseException {
  Ast.VarDecl v; Ast.VarDeclList vl = new Ast.VarDeclList();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwVarDecl:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      v = astVarDecl();
                     vl.add(v);
    }
    {if (true) return vl;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.MethodDeclList astMethodDeclList() throws ParseException {
  Ast.MethodDecl m; Ast.MethodDeclList ml = new Ast.MethodDeclList();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwMethodDecl:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      m = astMethodDecl();
                        ml.add(m);
    }
    {if (true) return ml;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.FormalList astFormalList() throws ParseException {
  Ast.Formal f; Ast.FormalList fl = new Ast.FormalList();
    jj_consume_token(41);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      f = astFormal();
                        fl.add(f);
    }
    jj_consume_token(42);
    {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.StmtList astStmtList() throws ParseException {
  Ast.Stmt s; Ast.StmtList sl = new Ast.StmtList();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwAssign:
      case kwCallStmt:
      case kwIf:
      case kwPrint:
      case kwReturn:
      case kwWhile:
      case 43:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      s = astStmt();
                  sl.add(s);
    }
    {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.ExpList astExpList() throws ParseException {
  Ast.Exp e; Ast.ExpList el = new Ast.ExpList();
    jj_consume_token(41);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      e = astExp();
                     el.add(e);
    }
    jj_consume_token(42);
    {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.ClassDecl astClassDecl() throws ParseException {
  Ast.Exp e1, e2; Ast.VarDeclList vl; Ast.MethodDeclList ml;
    jj_consume_token(kwClassDecl);
    e1 = astExp();
    e2 = astExp();
    vl = astVarDeclList();
    ml = astMethodDeclList();
    {if (true) return new Ast.ClassDecl((Ast.Id)e1,(Ast.Id)e2,vl,ml);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.VarDecl astVarDecl() throws ParseException {
  Ast.Type t; Ast.Exp e1, e2;
    jj_consume_token(kwVarDecl);
    t = astType();
    e1 = astExp();
    e2 = astExp();
    {if (true) return new Ast.VarDecl(t,(Ast.Id)e1,e2);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.MethodDecl astMethodDecl() throws ParseException {
  Ast.Type t; Ast.Exp e; Ast.FormalList fl;
  Ast.VarDeclList vl; Ast.StmtList sl;
    jj_consume_token(kwMethodDecl);
    t = astType();
    e = astExp();
    fl = astFormalList();
    vl = astVarDeclList();
    sl = astStmtList();
    {if (true) return new Ast.MethodDecl(t,(Ast.Id)e,fl,vl,sl);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Formal astFormal() throws ParseException {
  Ast.Type t; Ast.Exp e;
    jj_consume_token(41);
    jj_consume_token(kwFormal);
    t = astType();
    e = astExp();
    jj_consume_token(42);
    {if (true) return new Ast.Formal(t,(Ast.Id)e);}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Type astType() throws ParseException {
  Ast.Type t; Ast.Exp e;
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case kwIntType:
      jj_consume_token(kwIntType);
                              t = new Ast.IntType();
      break;
    case kwBoolType:
      jj_consume_token(kwBoolType);
                              t = new Ast.BoolType();
      break;
    case kwObjType:
      jj_consume_token(kwObjType);
      e = astExp();
                              t = new Ast.ObjType((Ast.Id)e);
      break;
    case kwArrayType:
      jj_consume_token(kwArrayType);
      t = astType();
                              t = new Ast.ArrayType(t);
      break;
    case kwVoid:
      jj_consume_token(kwVoid);
                              t = null;
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(42);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Stmt astStmt() throws ParseException {
  Ast.Exp e1, e2; Ast.Stmt s, s1, s2=null;
  Ast.ExpList el; Ast.StmtList sl;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      sl = astStmtList();
      jj_consume_token(44);
                                       s = new Ast.Block(sl);
      break;
    case kwAssign:
      jj_consume_token(kwAssign);
      e1 = astExp();
      e2 = astExp();
                                       s = new Ast.Assign(e1,e2);
      break;
    case kwCallStmt:
      jj_consume_token(kwCallStmt);
      e1 = astExp();
      e2 = astExp();
      el = astExpList();
                                       s = new Ast.CallStmt(e1,(Ast.Id)e2,el);
      break;
    case kwIf:
      jj_consume_token(kwIf);
      e1 = astExp();
      s1 = astStmt();
      if (jj_2_1(2)) {
        jj_consume_token(kwElse);
        s2 = astStmt();
      } else {
        ;
      }
                                              s = new Ast.If(e1,s1,s2);
      break;
    case kwWhile:
      jj_consume_token(kwWhile);
      e1 = astExp();
      s1 = astStmt();
                                       s = new Ast.While(e1,s1);
      break;
    case kwPrint:
      jj_consume_token(kwPrint);
      e1 = astExp();
                                       s = new Ast.Print(e1);
      break;
    case kwReturn:
      jj_consume_token(kwReturn);
      e1 = astExp();
                                       s = new Ast.Return(e1);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public Ast.BOP binOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
             {if (true) return Ast.BOP.ADD;}
      break;
    case 46:
      jj_consume_token(46);
             {if (true) return Ast.BOP.SUB;}
      break;
    case 47:
      jj_consume_token(47);
             {if (true) return Ast.BOP.MUL;}
      break;
    case 48:
      jj_consume_token(48);
             {if (true) return Ast.BOP.DIV;}
      break;
    case 49:
      jj_consume_token(49);
             {if (true) return Ast.BOP.AND;}
      break;
    case 50:
      jj_consume_token(50);
             {if (true) return Ast.BOP.OR;}
      break;
    case 51:
      jj_consume_token(51);
             {if (true) return Ast.BOP.EQ;}
      break;
    case 52:
      jj_consume_token(52);
             {if (true) return Ast.BOP.NE;}
      break;
    case 53:
      jj_consume_token(53);
             {if (true) return Ast.BOP.LT;}
      break;
    case 54:
      jj_consume_token(54);
             {if (true) return Ast.BOP.LE;}
      break;
    case 55:
      jj_consume_token(55);
             {if (true) return Ast.BOP.GT;}
      break;
    case 56:
      jj_consume_token(56);
             {if (true) return Ast.BOP.GE;}
      break;
    case 57:
      jj_consume_token(57);
             {if (true) return Ast.BOP.UND;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.UOP unOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
             {if (true) return Ast.UOP.NEG;}
      break;
    case 58:
      jj_consume_token(58);
             {if (true) return Ast.UOP.NOT;}
      break;
    case 59:
      jj_consume_token(59);
             {if (true) return Ast.UOP.UND;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Ast.Exp astExp() throws ParseException {
  Token n; int size;
  Ast.Type t; Ast.BOP bop; Ast.UOP uop; Ast.Exp e=null, e1, e2; Ast.ExpList el;
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case kwArrayElm:
    case kwBinop:
    case kwCall:
    case kwFalse:
    case kwField:
    case kwId:
    case kwIntVal:
    case kwNewArray:
    case kwNewObj:
    case kwStrVal:
    case kwTrue:
    case kwUnop:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case kwArrayElm:
        jj_consume_token(kwArrayElm);
        e1 = astExp();
        e2 = astExp();
                                  e = new Ast.ArrayElm(e1,e2);
        break;
      case kwBinop:
        jj_consume_token(kwBinop);
        bop = binOp();
        e1 = astExp();
        e2 = astExp();
                                  e = new Ast.Binop(bop,e1,e2);
        break;
      case kwCall:
        jj_consume_token(kwCall);
        e1 = astExp();
        e2 = astExp();
        el = astExpList();
                                  e = new Ast.Call(e1,(Ast.Id)e2,el);
        break;
      case kwId:
        jj_consume_token(kwId);
        n = jj_consume_token(ID);
                                  e = new Ast.Id(n.image);
        break;
      case kwIntVal:
        jj_consume_token(kwIntVal);
        n = jj_consume_token(INTVAL);
                                  e = new Ast.IntVal(Integer.parseInt(n.image));
        break;
      case kwFalse:
        jj_consume_token(kwFalse);
                                  e = new Ast.False();
        break;
      case kwField:
        jj_consume_token(kwField);
        e1 = astExp();
        e2 = astExp();
                                  e = new Ast.Field(e1,(Ast.Id)e2);
        break;
      case kwNewArray:
        jj_consume_token(kwNewArray);
        t = astType();
        n = jj_consume_token(INTVAL);
                                  e = new Ast.NewArray((Ast.Type)t,Integer.parseInt(n.image));
        break;
      case kwNewObj:
        jj_consume_token(kwNewObj);
        e1 = astExp();
        el = astExpList();
                                  e = new Ast.NewObj((Ast.Id)e1,el);
        break;
      case kwStrVal:
        jj_consume_token(kwStrVal);
        n = jj_consume_token(STRVAL);
                                  String s = n.image;
                                  e = new Ast.StrVal(s.substring(1,s.length()-1));
        break;
      case kwTrue:
        jj_consume_token(kwTrue);
                                  e = new Ast.True();
        break;
      case kwUnop:
        jj_consume_token(kwUnop);
        uop = unOp();
        e1 = astExp();
                                    e = new Ast.Unop(uop,e1);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(42);
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(kwElse)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(kwReturn)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(kwPrint)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(kwWhile)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(kwIf)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(kwCallStmt)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(kwAssign)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AstParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x400000,0x0,0x14081100,0x0,0x2100480,0x14081100,0x0,0x0,0xa1a58a40,0xa1a58a40,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x0,0x200,0x808,0x200,0x4,0x808,0x3ffe000,0xc004000,0x1,0x1,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AstParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AstParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AstParser(AstParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                        }

// Program demo for CS321 Compilers and Language Design I Lab 4
// Blake Wellington
// Modified from:
// Jingke Li, Portland State University

// Starting program for Assignment 3.
//

// This option can be turned on to help debugging your program.
// options { DEBUG_PARSER=true; }

PARSER_BEGIN(mjParser)
public class mjParser {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
	FileInputStream stream = new FileInputStream(args[0]);
	Ast.Program p = new mjParser(stream).Program();
	stream.close();
	p.dump();
      } else {
	System.out.println("Need a file name as command-line argument.");
      }
    } catch (TokenMgrError e) {
      System.err.println(e.toString());
    } catch (Exception e) {
      System.err.println(e.toString());
    }
  }
}
PARSER_END(mjParser)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* WHITE SPACE */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* COMMENTS */
{
  <SL_COMMENT:   "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <ML_COMMENT:   "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ "/">
| <UNTERMINATED: "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ >
    { if (true) throw new TokenMgrError("Unterminated multi-line comments ", 0); }  
}

TOKEN : /* KEYWORDS */
{
  <BOOLEAN: "boolean">   
| <CLASS:   "class">
| <ELSE:    "else">
| <EXTENDS: "extends">
| <FALSE:   "false">
| <IF:      "if">
| <INT:     "int">
| <MAIN:    "main">
| <NEW:     "new">
| <PUBLIC:  "public">
| <RETURN:  "return">
| <STATIC:  "static">
| <STRING:  "String">
| <PRINT:   "System.out.println">
| <TRUE:    "true">
| <VOID:    "void">         
| <WHILE:   "while">
| <#DIGIT:  ["0"-"9"]>
| <#LETTER: (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* INTLITERAL */
{
  <INTLITERAL: (<DIGIT>)+> 
  { try { 
      Integer.parseInt(matchedToken.image); 
    } catch (Exception e) { 
	throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
				", column " + matchedToken.beginColumn + 
				". Integer overflow: " + matchedToken.image, 0);
    } 
  }
}

TOKEN : /* STRLITERAL */
{
  <STRLITERAL: ("\"" (~["\"","\n"])+ "\"")>
  { if (matchedToken.image.length() > 257) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". String length over 255: " + matchedToken.image, 0); 
  }
}

TOKEN : /* ID */
{
  <ID: <LETTER> (<LETTER>|<DIGIT>|"_")*>
  { if (matchedToken.image.length() > 255) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Id length over 255: " + matchedToken.image, 0);
  }
}

//
// PARSER SECTION ---------------------------------------------------------------
//
// This version is based on the revised grammar of miniJava --- 
//   ambiguity, left-recursion, and common-prefixes have been addressed
//

// The Grammar:
//        ===================  My new Grammar  ===================
//        Program 					->	{ClassDecl}
//        
//        ClassDecl					->	"class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//        				
//        MethodDecl 				-> 	"public" (Type | "void") <ID> "(" [Formals] ")" "{" {VarDecl} {Statement} "}"
//        							| "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" {VarDecl} {Statement} "}"
//        				
//        Formals 					-> 	Type <ID> {"," Type <ID>}
//        
//        VarDecl 					-> 	Type <ID> ["=" InitExpr] ";"
//        
//        Type 						-> 	("int" | "boolean") ["[" "]"]
//        							| <ID>
//        				
//        Statement 				-> 	"{" {Statement} "}"
//        							| Lvalue ( ("=" InitExpr ) | ( Lvalue "(" [Args] ")" ) ";"
//        							| "if" "(" Expression ")" Statement ["else" Statement]
//        							| "while" "(" Expression ")" Statement
//        							| "System.out.println" "(" [Expression | <STRLITERAL>] ")" ";"
//        							| "return" [Expression] ";"
//        
//        Expression					->	ConditionalExpression ( "=" Expression )?
//        							| Lvalue ( ("(" [Args] ")") | ("." "length" "(" ")") )?
//        							| Literal
//        ConditionalExpression		->	ConditionalAndExpression ( "||" ConditionalAndExpression )*
//        ConditionalAndExpression	->	EqualityExpression ( "&&" EqualityExpression )*
//        EqualityExpression			->	RelationalExpression ( ( "==" | "!=" ) RelationalExpression )*
//        RelationalExpression		->	AdditiveExpression ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression )*
//        AdditiveExpression			->	MultiplicativeExpression ( ( "+" | "-" ) MultiplicativeExpression )*
//        MultiplicativeExpression	->	UnaryExpression ( ( "*" | "/" ) UnaryExpression )*
//        UnaryExpression				:=	( "!" | "-" ) UnaryExpression
//        							| "(" Expression ")"
//        
//        InitExpr					->	"new" PrimitiveType "[" <INTLITERAL> "]"
//        							|	"new" ID> "(" [Args] ")"
//        							| Expression
//        
//        Args 						-> 	Expression {"," Expression}
//        
//        PrimitiveType				-> ("boolean" | "int")
//        
//        Lvalue 		-> 	<ID> {"." <ID>} ["[" Expr "]"]
//        
//        Literal 	-> 	<INTLITERAL> | "true" | "false"


// 		Program -> {ClassDecl}
//
void Program(): {}
{
  ( ClassDecl() )*
}

//      ClassDecl	->	"class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
void ClassDecl(): {}
{
	"class" <ID> [ "extends" <ID> ] "{" ( VarDecl() )* ( MethodDecl() )* "}"
}

//        MethodDecl 				-> 	"public" (Type | "void") <ID> "(" [Formals] ")" "{" {VarDecl} {Statement} "}"
//        							| "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" {VarDecl} {Statement} "}"
void MethodDecl(): {}
{
  "public" (Type() | "void") <ID> "(" [ Formals() ] ")" "{" ( VarDecl() )* ( Statement() )* "}"
|  "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" ( VarDecl() )* ( Statement() )* "}"
}

// Formals -> Type <ID> {"," Type <ID>}
//
void Formals(): {} 
{
  Type() <ID> ( "," Type() <ID> )*
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//
void VarDecl(): {}
{
  Type() <ID> [ "=" InitExpr() ] ";"
}

//        
//  Type 		-> 	("int" | "boolean") ["[" "]"]
//        			| <ID>
void Type(): {}
{
  ( "int" | "boolean" ) ("[" "]")*
  | <ID>
}

//        				
//        Statement 	-> 	"{" {Statement} "}"
//        			| Lvalue ( ("=" InitExpr ) | ( Lvalue "(" [Args] ")" ) ";"
//        			| "if" "(" Expression ")" Statement ["else" Statement]
//        			| "while" "(" Expression ")" Statement
//        			| "System.out.println" "(" [Expression | <STRLITERAL>] ")" ";"
//        			| "return" [Expression] ";"
void Statement(): {}
{
	( "{" Statement() "}" )
	| Lvalue() ( ("=" InitExpr() ) | ( Lvalue() "(" (Args())*  ")" ) ) ";"
	| ( "if" "(" Expression() ")" Statement() ("else" Statement())* )
	| ( "while" "(" Expression() ")" Statement() )
	| ( "System.out.println" "(" ( Expression() | <STRLITERAL> )* ")" ";" )
	| ( "return" (Expression())* ";" )
}

//        
//        Expression					->	ConditionalExpression ( "=" Expression )?
//        							| Lvalue ( ("(" [Args] ")") | ("." "length" "(" ")") )?
//        							| Literal
void Expression(): {}
{
	ConditionalExpression() ( "=" Expression() )?
	| Lvalue() ( ("(" (Args())* ")") | ("." "length" "(" ")") )?
	| Literal()
}

//        ConditionalExpression		->	ConditionalAndExpression ( "||" ConditionalAndExpression )*
void ConditionalExpression(): {}
{
	ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

//        ConditionalAndExpression	->	EqualityExpression ( "&&" EqualityExpression )*
void ConditionalAndExpression(): {}
{
	EqualityExpression() ( "&&" EqualityExpression() )*
}
//        EqualityExpression			->	RelationalExpression ( ( "==" | "!=" ) RelationalExpression )*
void EqualityExpression(): {}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}
//        RelationalExpression		->	AdditiveExpression ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression )*
void RelationalExpression(): {}
{
  AdditiveExpression() ( ( "<" | ">" | "<=" | ">=" ) AdditiveExpression() )*
}
//        AdditiveExpression			->	MultiplicativeExpression ( ( "+" | "-" ) MultiplicativeExpression )*
void AdditiveExpression(): {}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

//        MultiplicativeExpression	->	UnaryExpression ( ( "*" | "/" ) UnaryExpression )*
void MultiplicativeExpression(): {}
{
  UnaryExpression() ( ( "*" | "/" ) UnaryExpression() )*
}

//        UnaryExpression				->	( "!" | "-" ) UnaryExpression
//        							| "(" Expression ")"
void UnaryExpression(): {}
{
  ( "!" | "-" ) UnaryExpression()
  | "(" Expression() ")"
}

//        
//        InitExpr					->	"new" PrimitiveType "[" <INTLITERAL> "]"
//        							|	"new" ID> "(" [Args] ")"
//        							| Expression
void InitExpr(): {}
{
	"new" PrimitiveType() "[" <INTLITERAL> "]"
	| "new" <ID> "(" (Args())* ")"
	| Expression()

}

//        
//        Args 						-> 	Expression {"," Expression}
//        
void Args(): {}
{
	Expression() ( "," Expression() )*
}

//        PrimitiveType				-> ("boolean" | "int")
//        
void PrimitiveType(): {}
{
	("boolean" | "int")
}
//        Lvalue 		-> 	<ID> {"." <ID>} ["[" Expr "]"]
void Lvalue(): {}
{
	<ID> ("." <ID>)* ("[" Expression() "]")?
}
//        
//        Literal 	-> 	<INTLITERAL> | "true" | "false"
void Literal(): {}
{
	<INTLITERAL> | "true" | "false"
}

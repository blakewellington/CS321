// Program demo for CS321 Compilers and Language Design I Lab 4
// Blake Wellington
// Modified from:
// Jingke Li, Portland State University

// Starting program for Assignment 3.
//

// This option can be turned on to help debugging your program.
// options { DEBUG_PARSER=true; LOOKAHEAD=2; }

// options { LOOKAHEAD=2; }
// TODO Put LOOKAHEAD directive within the methods that require it.

PARSER_BEGIN(mjParser)
import java.io.*;
public class mjParser {
  public static void main(String [] args) {
    try {
      if (args.length == 1) {
	FileInputStream stream = new FileInputStream(args[0]);
	Ast.Program p = new mjParser(stream).Program();
	stream.close();
	p.dump();
      } else {
	System.out.println("Need a file name as command-line argument.");
      }
    } catch (TokenMgrError e) {
      System.err.println(e.toString());
    } catch (Exception e) {
      System.err.println(e.toString());
    }
  }
}
PARSER_END(mjParser)

//
// LEXER SECTION ---------------------------------------------------------------
//

SKIP : /* WHITE SPACE */
{
  " " | "\t" | "\n" | "\r" | "\f"
}

SKIP : /* COMMENTS */
{
  <SL_COMMENT:   "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <ML_COMMENT:   "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ "/">
| <UNTERMINATED: "/*" ( ~["*"] | (["*"])+ (~["/"]) )* (["*"])+ >
    { if (true) throw new TokenMgrError("Unterminated multi-line comments ", 0); }  
}

TOKEN : /* KEYWORDS */
{
  <BOOLEAN: "boolean">   
| <CLASS:   "class">
| <ELSE:    "else">
| <EXTENDS: "extends">
| <FALSE:   "false">
| <IF:      "if">
| <INT:     "int">
| <MAIN:    "main">
| <NEW:     "new">
| <PUBLIC:  "public">
| <RETURN:  "return">
| <STATIC:  "static">
| <STRING:  "String">
| <PRINT:   "System.out.println">
| <TRUE:    "true">
| <VOID:    "void">         
| <WHILE:   "while">
| <#DIGIT:  ["0"-"9"]>
| <#LETTER: (["A"-"Z"]|["a"-"z"])>
}

TOKEN : /* length */
{
  <LENGTH: "length">
}

TOKEN : /* INTLITERAL */
{
  <INTLITERAL: (<DIGIT>)+> 
  { try { 
      Integer.parseInt(matchedToken.image); 
    } catch (Exception e) { 
	throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
				", column " + matchedToken.beginColumn + 
				". Integer overflow: " + matchedToken.image, 0);
    } 
  }
}

TOKEN : /* STRLITERAL */
{
  <STRLITERAL: ("\"" (~["\"","\n"])+ "\"")>
  { if (matchedToken.image.length() > 257) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". String length over 255: " + matchedToken.image, 0); 
  }
}

TOKEN : /* ID */
{
  <ID: <LETTER> (<LETTER>|<DIGIT>|"_")*>
  { if (matchedToken.image.length() > 255) 
      throw new TokenMgrError("Lexical error at line " + matchedToken.beginLine + 
			      ", column " + matchedToken.beginColumn + 
			      ". Id length over 255: " + matchedToken.image, 0);
  }
}

//
// PARSER SECTION ---------------------------------------------------------------
//
// This version is based on the revised grammar of miniJava --- 
//   ambiguity, left-recursion, and common-prefixes have been addressed
//

// The Grammar:
//        ===================  My new Grammar  ===================
//        Program 		->	{ClassDecl}
//       
//        ClassDecl		->	"class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
//        				
//        MethodDecl 	-> "public" 
//            		   (
//         	             ( Type | "void") <ID> "(" [Formals] )
//        		     | ( "static" "void" "main" "(" "String" "[" "]" <ID> )
//                	   ( ")" "{" {VarDecl} {Statement} "}")
//                 	   )
//        				
//        Formals 	-> 	Type <ID> {"," Type <ID>}
//        
//        VarDecl 	-> 	Type <ID> ["=" InitExpr] ";"
//        
//        Type 		-> 	(<BOOLEAN> | <INT>) ["[" "]"]
//        			| <ID>
//        				
//        Statement 	-> 	"{" {Statement} "}"
//        			| Lvalue ( ("=" InitExpr ) | ( "(" [Args] ")" ) ";"
//        			| "if" "(" Expr ")" Statement ["else" Statement]
//        			| "while" "(" Expr ")" Statement
//        			| "System.out.println" "(" [Expr | <STRLITERAL>] ")" ";"
//        			| "return" [Expr] ";"
//
//        Args 		-> 	Expr {"," Expr}
//        
//        InitExpr	->	"new" ((<BOOLEAN> | <INT>) "[" <INTLITERAL> "]") | (ID> "(" [Args] ")")
//        			| Expr
//        
//       
//        Expr		->	CondAndExpr ( "||" CondAndExpr )*
//        CondAndExpr	->	EqExpr ( "&&" EqExpr )*
//        EqExpr	->	RelExpr ( ( "==" | "!=" ) RelExpr )*
//        RelExpr	->	AddExpr ( ( "<" | ">" | "<=" | ">=" ) AddExpr )*
//        AddExpr	->	MultExpr ( ( "+" | "-" ) MultExpr )*
//        MultExpr	->	UnaryExpr ( ( "*" | "/" ) UnaryExpr )*
//        UnaryExpr	->	( "!" | "-" ) UnaryExpr
//        			| Atom
//  Use instanceof here
//        Atom		->	  Lvalue ( ("(" [Args] ")") | ("." "length" "(" ")") )?
//        			| Literal
//  				| "(" Expr ")"
//        
//        Lvalue 	-> 	<ID> {"." <ID>} ["[" Expr "]"]
//        
//        Literal 	-> 	<INTLITERAL> | "true" | "false"


// Program -> {ClassDecl}
//
Ast.Program Program(): 
{ 
  Ast.ClassDecl c;
  Ast.ClassDeclList cl = new Ast.ClassDeclList();
}
{
  ( c=ClassDecl() {cl.add(c);} )* //<EOF>
  { return new Ast.Program(cl); }
}

// ClassDecl	->	"class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
Ast.ClassDecl ClassDecl(): 
{
  Ast.VarDecl v;
  Ast.MethodDecl m;
  Ast.MethodDeclList ml = new Ast.MethodDeclList();
  Ast.VarDeclList vl = new Ast.VarDeclList();
  Token class_token; 
  Token parent_token; 
  Ast.Id c;
  Ast.Id p = null;
}
{
  <CLASS> class_token=<ID> { c = new Ast.Id(class_token.image); } 
  [ <EXTENDS> parent_token=<ID>  { p = new Ast.Id(parent_token.image); } ] 
    "{" 
       ( v=VarDecl() { vl.add(v); } )* 
       ( m=MethodDecl() { ml.add(m); } )*
    "}"

  { return new Ast.ClassDecl(c, p, vl, ml); }
}

// MethodDecl 	-> "public" 
//                 (
//                      ( Type | "void") <ID> "(" [Formals] )
//        	      | ( "static" "void" "main" "(" "String" "[" "]" <ID> )
//                 )
//                 ( ")" "{" {VarDecl} {Statement} "}")
Ast.MethodDecl MethodDecl(): 
{
  Token tkn = null;
  Ast.Type t = null;
  Ast.Id mid = null;
  Ast.Formal f = null;
  Ast.FormalList fl = new Ast.FormalList();
  Ast.VarDecl v = null;
  Ast.VarDeclList vl = new Ast.VarDeclList();
  Ast.Stmt s = null;
  Ast.StmtList sl = new Ast.StmtList();
}
{
  <PUBLIC> 
  (
    ( ( t=Type() | <VOID> ) tkn=<ID> "(" [ fl=Formals()] ")"
        { mid=new Ast.Id(tkn.image); } )
    | ( <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" tkn=<ID> ")"
        { mid=new Ast.Id(tkn.image); } )
  ) 
  ( "{" 
       ( LOOKAHEAD(2) v=VarDecl() {vl.add(v); })* 
       ( s=Statement() {sl.add(s); } )*
    "}" 
  )

  { return new Ast.MethodDecl(t, mid, fl, vl, sl); }
}


// Formals -> Type <ID> {"," Type <ID>}
Ast.FormalList Formals(): 
{
  Ast.FormalList fl = new Ast.FormalList();
  Ast.Formal f = null;
  Token tkn = null;
  Ast.Type t = null;
} 
{
   t=Type() tkn=<ID> {f = new Ast.Formal(t, new Ast.Id(tkn.image)); fl.add(f); } ( "," t=Type() tkn=<ID> {fl.add(new Ast.Formal(t, new Ast.Id(tkn.image))); } )*
  { return fl; }
}

// VarDecl -> Type <ID> ["=" InitExpr] ";"
//
Ast.VarDecl VarDecl(): 
{
  Ast.Type t = null;
  Ast.Exp e = null;
  Ast.Id name = null;
  Token tkn = null;
}
{
  t=Type() tkn=<ID> {name=new Ast.Id(tkn.image); } [ "=" e=InitExpr() ] ";"
  { return new Ast.VarDecl(t, name, e); }
}

//        
//  Type 	-> 	("int" | "boolean") ["[" "]"]
//        		| <ID>
Ast.Type Type(): 
{
  Ast.Type t = null;
  Token tkn = null;
  boolean isArray = false;
}
{
  (   <INT> {t=new Ast.IntType(); } 
    | <BOOLEAN> {t=new Ast.BoolType(); } )
  ("[" "]" {isArray=true; })*
  | tkn=<ID> { t=new Ast.ObjType(new Ast.Id(tkn.image)); } 

  { if (isArray)
      t=new Ast.ArrayType(t);
    return t; }
}

// Statement 	-> 	"{" {Statement} "}"
//        		| Lvalue ( ("=" InitExpr ) | ( "(" [Args] ")" ) ";"
//        		| "if" "(" Expr ")" Statement ["else" Statement]
//        		| "while" "(" Expr ")" Statement
//        		| "System.out.println" "(" [Expr | <STRLITERAL>] ")" ";"
//        		| "return" [Expr] ";"
Ast.Stmt Statement(): 
{
  Ast.Stmt stmt=null, s1=null, s2=null;
  Ast.StmtList sl = new Ast.StmtList();
  Ast.Exp e1=null, e2=null;
  Ast.ExpList elist = new Ast.ExpList();
  Ast.Id mid = null;
  Token tkn = null;
  
}
{
  // Block of Statements
   "{" (s1=Statement() {sl.add(s1); }  )* "}"
      { stmt=new Ast.Block(sl); }
  // Lvalue Section:
    // Assignment Statement
        | e1=Lvalue() ( 
          ( "=" e2=InitExpr() ";" 
          { stmt=new Ast.Assign(e1, e2); }
          )
  
    // Call Statement
       | ( "(" [ elist=Args() ]  ")" ";"
         { if (e1 instanceof Ast.Id) 
           { stmt = new Ast.CallStmt((Ast.Id)null, (Ast.Id)e1, elist); }
           else if (e1 instanceof Ast.Field)
           { stmt = new Ast.CallStmt(((Ast.Field)e1).obj, ((Ast.Field)e1).var, elist); }
         }
         )
  // If Statement
  | ( <IF> "(" e1=Expr() ")" s1=Statement() [ LOOKAHEAD(2) <ELSE> s2=Statement()] ) 
    { stmt=new Ast.If(e1, s1, s2); }
  // While Statement
  | ( <WHILE> "(" e1=Expr() ")" s1=Statement() ) 
    { stmt=new Ast.While(e1, s1); }
  // Print Statement
  | <PRINT> "(" [ e1=Expr() | tkn=<STRLITERAL> {e1=new Ast.StrVal(tkn.image);}] ")" ";" 
    { stmt=new Ast.Print(e1); }
  // Return Statement
  | ( <RETURN> (e1=Expr())? ";" )
    { stmt=new Ast.Return(e1); }
  )
  { return stmt; }
}


// Expr	->	CondAndExpr ( "||" CondAndExpr )*
Ast.Exp Expr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=CondAndExpr() ( "||" { op = Ast.BOP.OR; } 
                     e2=CondAndExpr() { e1 = new Ast.Binop(op, e1, e2); } )*
  { return e1; }
}

// CondAndExpr	->	EqExpr ( "&&" EqExpr )*
Ast.Exp CondAndExpr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=EqExpr() ( "&&"  { op = Ast.BOP.AND; }
                e2=EqExpr() { e1 = new Ast.Binop(op, e1, e2); } )*
  { return e1; }
}


// EqExpr	->	RelExpr ( ( "==" | "!=" ) RelExpr )*
Ast.Exp EqExpr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=RelExpr() ( ( "=="   { op = Ast.BOP.EQ; }
                 | "!="   { op = Ast.BOP.NE; }
               ) e2=RelExpr(){ e1 = new Ast.Binop(op, e1, e2); }  )*
  { return e1; }
}


// RelExpr	->	AddExpr ( ( "<" | ">" | "<=" | ">=" ) AddExpr )*
Ast.Exp RelExpr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=AddExpr() ( ( "<"   { op = Ast.BOP.LE; }
                 | ">"   { op = Ast.BOP.GT; }
                 | "<="  { op = Ast.BOP.LE; }
                 | ">="  { op = Ast.BOP.GE; }
               ) e2=AddExpr(){ e1 = new Ast.Binop(op, e1, e2); }  )*
  { return e1; }
}


// AddExpr	->	MultExpr ( ( "+" | "-" ) MultExpr )*
Ast.Exp AddExpr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=MultExpr() ( ( "+" { op = Ast.BOP.ADD; }
                  | "-" { op = Ast.BOP.SUB; }) 
                  e2=MultExpr() { e1 = new Ast.Binop(op, e1, e2); } )*
  { return e1; }
}


// MultExpr	->	UnaryExpr ( ( "*" | "/" ) UnaryExpr )*
Ast.Exp MultExpr(): 
{
  Ast.Exp e1 = null;
  Ast.Exp e2 = null;
  Ast.BOP op = null;
}
{
  e1=UnaryExpr() 
  ( 
    ( 
      "*" { op = Ast.BOP.MUL; }
    | "/" { op = Ast.BOP.DIV; }
    ) 
    e2=UnaryExpr() { e1 = new Ast.Binop(op, e1, e2); })*
  { return e1; }
}


//        UnaryExpr	->	( "!" | "-" ) UnaryExpr
//        			| Atom
Ast.Exp UnaryExpr(): 
{
  Ast.Exp e = null;
  Ast.UOP op = null;
}
{
  ( 
   ( "!" { op = Ast.UOP.NOT; }
   | "-" { op = Ast.UOP.NOT; } )
   e=UnaryExpr() { e = new Ast.Unop(op, e); })
  | e=Atom() 
  { return e; }
}

//  Use instanceof here within the Call statement
//  Atom  ->  Lvalue ( ("(" [Args] ")") | ("." "length" "(" ")") )?
//          | Literal
//	    | "(" Expr ")"
//        

Ast.Exp Atom():
{
  Ast.Exp e = null;
//  Ast.Stmt stmt=null, s1=null, s2=null;
//  Ast.StmtList sl = new Ast.StmtList();
  Ast.Exp e1=null;
  Ast.ExpList elist = new Ast.ExpList();
  Ast.Id mid = null;
  Token tkn = null;
  
}
{
  // Create a call expression
  e=Lvalue() ( ( "(" [elist=Args()] ")" ) | ("." <LENGTH> "(" ")" ) )?
         { if (e instanceof Ast.Id)
           { e = new Ast.Call((Ast.Id)null, (Ast.Id)e, elist); }
           else if (e instanceof Ast.Field)
           { e = new Ast.Call(((Ast.Field)e1).obj, ((Ast.Field)e1).var, elist); }
         }


  // Create a literal expression
  | e=Literal()
  // Create a parenthesized expression
  | "(" e=Expr() ")"

  { return e; }
}

//  InitExpr	->	"new" (<BOOLEAN> | <INT>) "[" <INTLITERAL> "]" 
//                      | (<ID> "(" [Args] ")")
//        		| Expr
Ast.Exp InitExpr(): 
{
  Token tkn;
  Ast.Type t = null;
  int sz = 0;
  Ast.Exp e = null;
  Ast.ExpList el = new Ast.ExpList();
}
{
  <NEW>
  
    (
      (   
          <BOOLEAN> {t = new Ast.BoolType(); }
        | <INT>     {t = new Ast.IntType(); }
      ) 
      ("[" tkn=<INTLITERAL> "]" 
      {
        sz = Integer.parseInt(tkn.image); 
        e=new Ast.NewArray(t, sz); 
        t=new Ast.IntType();
      } )
    | ( tkn=<ID> "(" [el=Args()] ")" 
        { e=new Ast.NewObj(new Ast.Id(tkn.image), el); 
        } )
    )
  | e=Expr()
  
  { return e; }
}

//        
// Args 	-> 	Expr {"," Expr}
//        
Ast.ExpList Args(): 
{
  Ast.Exp e = null;
  Ast.ExpList el = null;
}
{
  e=Expr() {el.add(e); } ( "," e=Expr() {el.add(e); } )*
  { return el; }
}


// Lvalue 	-> 	<ID> {"." <ID>} ["[" Expr "]"]
Ast.Exp Lvalue(): 
{
  Ast.Exp e, idx;
  Token tkn;
  Ast.ExpList elist;
  boolean isArrayElement = false;
}
{
  tkn=<ID>
  { e = new Ast.Id(tkn.image); } 
    ( LOOKAHEAD(2) "." tkn=<ID> 
    { e= new Ast.Field(e, new Ast.Id(tkn.image)); } )*
  [ "["  idx=Expr() { e = new Ast.ArrayElm(e, idx); }"]" ]  
  { return e; }
}


// Literal 	-> 	<INTLITERAL> | "true" | "false"
Ast.Exp Literal(): 
{
  Token tkn;
  Ast.Exp e = null;
}
{
      tkn=<INTLITERAL> { e = new Ast.IntVal(Integer.parseInt(tkn.image)); }
      | tkn=<TRUE> { e = new Ast.True(); }
      | tkn=<FALSE>{ e = new Ast.False(); }
  { return e; }
}
